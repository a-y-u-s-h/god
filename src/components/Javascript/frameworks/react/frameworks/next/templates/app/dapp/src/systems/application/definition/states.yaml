id: application
type: parallel
preserveActionOrder: true
context:
  database: {}
  user: null
  api:
    settings:
      id: ""
      server: ""
  network:
    selected: 0
on:
  network.select:
    actions: network.select
states:
  server:
    type: parallel
    states:
      database:
        type: parallel
  user:
    id: user
    type: parallel
    entry: api.initialize
    states:
      database:
        initial: idle
        states:
          idle:
            on:
              database.get.user.transactions:
                target: fetch user transactions
              database.get.user.eth.balance:
                target: fetch user eth balance
              database.get.user.erc20.balances:
                target: fetch user erc20 balances
              database.get.user.nft.balances:
                target: fetch user nft balances
          fetch user transactions:
            invoke:
              src: database.get.user.transactions
              onDone:
                target: idle
                actions: assign.user.data
              onError:
                target: error
          fetch user eth balance:
            invoke:
              src: database.get.user.eth.balance
              onDone:
                target: idle
                actions: assign.user.data
              onError:
                target: error
          fetch user erc20 balances:
            invoke:
              src: database.get.user.erc20.balances
              onDone:
                target: idle
                actions: assign.user.data
              onError:
                target: error
          fetch user nft balances:
            invoke:
              src: database.get.user.nft.balances
              onDone:
                target: idle
                actions: assign.user.data
              onError:
                target: error
          error:
            entry: log.errors
            always: idle
      authentication:
        id: authentication
        initial: uninitialized
        states:
          uninitialized:
            invoke:
              src: get.current.user
              onDone:
                - cond: user.connected
                  target: signed in
                  actions: assign.user
                - cond: user.disconnected
                  target: signed out
                  actions: assign.user
              onError:
                target: signed out
                actions: assign.user
          signed out:
            on:
              connect.wallet:
                target: connecting
              sign.in.regular:
                target: sign in (regular)
          sign in (regular):
            invoke:
              src: sign.in.regular
              onDone:
                - cond: user.connected
                  target: signed in
                  actions: assign.user
                - cond: user.disconnected
                  target: signed out
                  actions: assign.user
              onError:
                target: error
          connecting:
            invoke:
              src: connect.wallet
              onDone:
                - cond: user.connected
                  target: signed in
                  actions: assign.user
                - cond: user.disconnected
                  target: signed out
                  actions: assign.user
              onError:
                target: error
          signed in:
            on:
              disconnect.wallet:
                target: disconnecting
          disconnecting:
            invoke:
              src: disconnect.wallet
              onDone:
                target: signed out
                actions: assign.user
          error:
            entry: log.errors
            always: signed out
  interface:
    type: parallel
    states:
      layout:
        initial: default
        states:
          default: {}
      theme:
        initial: dark
        states:
          light:
            on:
              theme.next: dark
              theme.prev: dark
              theme.choose.dark: dark
          dark:
            on:
              theme.next: light
              theme.prev: light
              theme.choose.light: light

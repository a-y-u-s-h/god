id: application
type: parallel
preserveActionOrder: true
context:
  api: {}
  settings:
    moralis:
      serverUrl: ""
      appId: ""
states:
  network:
    # ======================================
    #  This state tracks network changes,
    #  and updates selected network in context.
    # ======================================
    id: network
    initial: synchronize
    states:
      idle:
        on:
          "*":
            target: "#network.synchronize"
      synchronize:
        invoke:
          src: synchronize.network
          onDone:
            target: idle
            actions: network.change
          onError:
            target: idle
            actions: log.errors
  user:
    id: user
    type: parallel
    entry: api.initialize
    states:
      observer:
        # ======================================
        #  User Observer is an invoked service
        #  that basically sends our machine some
        #  extra events when something related to
        #  user occurs (user changes accounts, user
        #  changes networks, etc).
        # ======================================
        invoke:
          src: user.observer
      authentication:
        id: authentication
        initial: disconnected
        states:
          disconnected:
            # ======================================
            #  When user enters disconnected state,
            #  we check whether user object exists,
            #  if it does we move to connected state
            #  otherwise we wait for events that can
            #  log user in somewhow.
            # ======================================
            initial: uninitialized
            states:
              uninitialized:
                # ======================================
                #  When user is uninitialized, we need
                #  to check if they're connected already
                #  or not. If they already are, then
                #  we need to take them to connected state
                #  otherwise they go to disconnected state.
                # ======================================
                invoke:
                  src: get.current.user
                  onDone:
                    - cond: user.connected
                      target: "#authentication.connected"
                      actions: assign.user
                    - cond: user.disconnected
                      target: "#authentication.disconnected.idle"
                      actions: assign.user
                  onError:
                    target: "#authentication.disconnecting"
                    actions: assign.user
              idle:
                on:
                  connect.wallet:
                    target: "#authentication.connecting"
                  account.connected:
                    target: "#authentication.connected"
          connecting:
            # ======================================
            #  If you want to add additional methods
            #  using which the user can connect, or
            #  have some checks (like network should
            #  be a particular chain or something like that)
            #  you need to modify this connecting state.
            # ======================================
            initial: wallet
            states:
              wallet:
                invoke:
                  src: connect.wallet
                  onDone:
                    - cond: user.connected
                      target: "#authentication.connected"
                      actions: assign.user
                    - cond: user.disconnected
                      target: "#authentication.disconnected.idle"
                      actions: assign.user
                  onError:
                    target: "#authentication.error"
          connected:
            # ======================================
            #  When the user is connected already,
            #  all we do is invoke a service that synchronizes
            #  user data periodically so that the UI
            #  remains updated. And listen to events that
            #  can log user out.
            # ======================================
            invoke:
              id: synchronize data
              src: synchronize.data
              onDone:
                actions: log.info
              onError:
                actions: log.errors
            on:
              disconnect.wallet:
                target: disconnecting
              account.disconnected:
                target: disconnecting
              account.changed:
                target: disconnecting
              network.changed:
                actions: network.change
          disconnecting:
            initial: wallet
            states:
              wallet:
                invoke:
                  src: disconnect.wallet
                  onDone:
                    target: animation
                    actions: assign.user
                  onError:
                    target: "#authentication.error"
                    actions: assign.user
              animation:
                after:
                  1000:
                    target: "#authentication.disconnected.idle"
          error:
            entry: log.errors
            always: disconnected

  interface:
    type: parallel
    states:
      layout:
        # ======================================
        #  This application has different layout
        #  modes - meaning, we can show different
        #  levels of interface complexity depending
        #  on what layout mode user chooses to work
        #  with.
        # ======================================
        initial: standard
        states:
          scientific:
            on:
              layout.next: standard
              layout.prev: standard
              layout.choose.standard: standard
              layout.choose.scientific: scientific
          standard:
            on:
              layout.next: scientific
              layout.prev: scientific
              layout.choose.standard: standard
              layout.choose.scientific: scientific

      theme:
        # ======================================
        #  In this application we also have
        #  different themes - meaning user can
        #  choose what kind of color scheme they
        #  want for this application based on their
        #  preferences.
        # ======================================
        initial: dark
        states:
          light:
            on:
              theme.next: dark
              theme.prev: dark
              theme.choose.dark: dark
              theme.choose.light: light
          dark:
            on:
              theme.next: light
              theme.prev: light
              theme.choose.dark: dark
              theme.choose.light: light

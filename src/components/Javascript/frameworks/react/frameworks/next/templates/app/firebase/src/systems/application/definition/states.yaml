id: application
type: parallel
predictableActionArguments: true
context:
  firebase:
    config:
      apiKey: "AIzaSyAw0Lfjegw2FCF0Fe38Fd-yaL1WUv_VGCg"
      authDomain: "blank-52ce5.firebaseapp.com"
      projectId: "blank-52ce5"
      storageBucket: "blank-52ce5.appspot.com"
      messagingSenderId: "464643118146"
      appId: "1:464643118146:web:9401c80b1a8eba78cc49db"
      measurementId: "G-0105C25KYX"
states:
  user:
    type: parallel
    states:
      settings: {}
      network: {}
      connection:
        on:
          load.user:
            - cond: user.exists
              target: "#authentication.connected"
              actions: assign.user
      authentication:
        id: authentication
        initial: uninitialized
        entry: firebase.initialize
        invoke:
          src: authentication.observer
        states:
          uninitialized:
            invoke:
              src: load.user
              onDone:
                - cond: user.exists
                  target:
                    - connected
                    - "#authorization.checking"
                  actions: assign.user
                - target:
                    - disconnected
                    - "#authorization.checking"
                  actions: assign.user
              onError:
                target:
                  - disconnected
                  - "#authorization.checking"
                actions: assign.user
          disconnected:
            on:
              sign.in.anonymous: connecting.anonymously
              sign.in.social: connecting.socially
              sign.in: connecting.email & password
              sign.up: connecting.registration
          connecting:
            states:
              anonymously:
                invoke:
                  src: sign.in.anonymous
                  onDone:
                    target:
                      - "#authentication.connected"
                      - "#authorization.checking"
                    actions: assign.user
                  onError:
                    target: "#authentication.error"
                    actions: assign.user
              socially:
                invoke:
                  src: sign.in.social
                  onDone:
                    target:
                      - "#authentication.connected"
                      - "#authorization.checking"
                    actions: assign.user
                  onError:
                    target: "#authentication.error"
                    actions: assign.user
              email & password:
                invoke:
                  src: sign.in.email.password
                  onDone:
                    target:
                      - "#authentication.connected"
                      - "#authorization.checking"
                    actions: assign.user
                  onError:
                    target: "#authentication.error"
                    actions: assign.user
              registration:
                invoke:
                  src: sign.up
                  onDone:
                    target:
                      - "#authentication.connected"
                      - "#authorization.checking"
                    actions: assign.user
                  onError:
                    target: "#authentication.error"
                    actions: assign.user
          disconnecting:
            states:
              signing out:
                invoke:
                  src: sign.out
                  onDone:
                    target:
                      - "#authentication.disconnected"
                      - "#authorization.checking"
                    actions: assign.user
                  onError:
                    target: "#authentication.error"
                    actions: assign.user
          connected:
            on:
              sign.out: disconnecting.signing out
          error:
            entry: telemetry.log.errors
            always:
              target:
                - disconnected
                - "#authorization.checking"
              actions: assign.user
      authorization:
        id: authorization
        initial: levels
        states:
          checking:
            invoke:
              src: get.user.authorization
              onDone:
                - cond: user.is.individual
                  target: "#authorization.levels.individual"
                - cond: user.is.professional
                  target: "#authorization.levels.professional"
                - cond: user.is.organization
                  target: "#authorization.levels.organization"
                - cond: user.is.developer
                  target: "#authorization.levels.developer"
                - cond: user.is.administrator
                  target: "#authorization.levels.administrator"
                - cond: user.is.anonymous
                  target: "#authorization.levels.anonymous"
              onError:
                target: "#authorization.levels.anonymous"
          levels:
            initial: anonymous
            states:
              anonymous: {}
              individual: {}
              professional: {}
              organization: {}
              developer: {}
              administrator: {}
  database:
    id: database
    type: parallel

  interface:
    type: parallel
    states:
      theme:
        initial: dark
        states:
          light:
            on:
              theme.next: dark
              theme.prev: dark
              theme.choose.dark: dark
              theme.choose.light: light
          dark:
            on:
              theme.next: light
              theme.prev: light
              theme.choose.dark: dark
              theme.choose.light: light
      layout:
        initial: standard
        states:
          scientific:
            on:
              layout.next: standard
              layout.prev: standard
              layout.choose.standard: standard
              layout.choose.scientific: scientific
          standard:
            on:
              layout.next: scientific
              layout.prev: scientific
              layout.choose.standard: standard
              layout.choose.scientific: scientific

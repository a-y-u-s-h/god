const path = require("path")
const CopyWebpackPlugin = require("copy-webpack-plugin")
const load = require("./src/support/utilities/development/loaders.js")
const application = load.yaml("./src/settings/application.yaml")

module.exports = environment => ({
  mode: environment.mode,
  stats: "none",
  entry: {
    /*
      ======================================
        These files should be generated
        along with the react specific index.html.
        index.html generated by react will run
        on every page load. It's our content script.
        Other scripts are under 'support' as well.
      ======================================
    */
    popup: "./src/support/application/routes/popup.js",
    content: "./src/support/application/routes/content.js",
    background: "./src/support/application/routes/background.js"
  },
  output: {
    /*
      ======================================
        All files are output as JS files.
        React components also convert to JS files.
        And when you import these files, you
      ======================================
    */
    path: path.resolve(__dirname, "public"),
    filename: "[name].js"
  },
  plugins: [
    /*
    ======================================
      CopyWebpackPlugin copies contents
      of various folders from and to certain
      directories. We use this to copy required
      data (assets), metadata (manifests, index.html).
    ======================================
  */
    new CopyWebpackPlugin({
      patterns: [
        {
          /*
            ======================================
              Copying all data, metadata into output.
            ======================================
          */
          from: `${path.resolve(
            __dirname,
            "src",
            "support",
            "application",
            "data",
            "types",
            `${application.type || "generic"}`
          )}`,
          to: `${path.resolve(__dirname, "public")}`
        },
        {
          /*
            ======================================
              Copying all assets into output.
            ======================================
          */
          from: `${path.resolve(__dirname, "src", "assets")}`,
          to: `${path.resolve(__dirname, "public", "assets")}`
        },
        {
          /*
            ======================================
              Copying all libraries into output.
            ======================================
          */
          from: `${path.resolve(
            __dirname,
            "src",
            "support",
            "application",
            "data",
            "libraries"
          )}`,
          to: `${path.resolve(__dirname, "public")}`
        }
      ]
    })
  ],
  node: {
    /*
      ======================================
        These are necessary so that webpack
        doesn't modify __dirname and __filename
        variables. These must remain according
        to the platform that they're running on.
      ======================================
    */
    __dirname: false,
    __filename: false
  },
  resolve: {
    /*
      ======================================
        Here you tell Webpack to look for
        certain extensions. And you also
        tell it to resolve certain symbols
        as paths (aliases).
      ======================================
    */
    extensions: [".ts", ".tsx", ".js", ".jsx"],
    alias: {
      "@": path.resolve(__dirname, "src")
    }
  },
  module: {
    /*
      ======================================
        Here, we're specifying different
        kinds of loaders to load certain
        kinds of files.
      ======================================
    */
    rules: [
      { test: /\.tsx?$/, loader: "ts-loader" },
      { test: /\.css$/, use: ["style-loader", "css-loader"] },
      {
        test: /\.(js|jsx)$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader"
        }
      },
      {
        test: /\.ya?ml$/,
        type: "json",
        use: "yaml-loader"
      }
    ]
  }
})
